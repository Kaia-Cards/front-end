import React, { useState, useEffect } from 'react';
import './App.css';

const API_BASE = 'http://localhost:3001/api';

interface Brand {
  id: string;
  name: string;
  logo: string;
  category: string;
  country: string;
  description: string;
  discount: number;
  minValue: number;
  maxValue: number;
  available: boolean;
  cardCount: number;
}

interface Order {
  id: string;
  brand: string;
  brandLogo: string;
  value: number;
  status: string;
  pricing: {
    originalValue: number;
    finalPrice: number;
    cashback: number;
  };
  createdAt: string;
  cardCode?: string;
  canReorder?: boolean;
  expiresAt?: string;
  payment?: {
    method: string;
    amount: number;
    address: string;
    network: string;
  };
}

interface UserStats {
  totalCashback: number;
  totalSpent: number;
  orderCount: number;
}

export default function App() {
  const [brands, setBrands] = useState<Brand[]>([]);
  const [filteredBrands, setFilteredBrands] = useState<Brand[]>([]);
  const [selectedBrand, setSelectedBrand] = useState<Brand | null>(null);
  const [selectedValue, setSelectedValue] = useState<number>(0);
  const [email, setEmail] = useState('');
  const [currentOrder, setCurrentOrder] = useState<Order | null>(null);
  const [userOrders, setUserOrders] = useState<Order[]>([]);
  const [userStats, setUserStats] = useState<UserStats>({ totalCashback: 0, totalSpent: 0, orderCount: 0 });
  const [activeTab, setActiveTab] = useState('shop');
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [notification, setNotification] = useState<string | null>(null);

  const categories = ['all', 'Shopping', 'Travel', 'Food', 'Entertainment'];

  useEffect(() => {
    fetchBrands();
    const savedEmail = localStorage.getItem('userEmail');
    if (savedEmail) {
      setEmail(savedEmail);
      fetchUserOrders(savedEmail);
    }
  }, []);

  useEffect(() => {
    filterBrands();
  }, [brands, searchTerm, selectedCategory]);

  const showNotification = (message: string) => {
    setNotification(message);
    setTimeout(() => setNotification(null), 3000);
  };

  const fetchBrands = async () => {
    try {
      const response = await fetch(`${API_BASE}/brands`);
      const data = await response.json();
      setBrands(data);
    } catch (error) {
      console.error('Failed to fetch brands:', error);
      showNotification('Failed to load brands. Please try again.');
    }
  };

  const filterBrands = () => {
    let filtered = brands;

    if (searchTerm) {
      filtered = filtered.filter(brand =>
        brand.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        brand.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        brand.country.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (selectedCategory !== 'all') {
      filtered = filtered.filter(brand => brand.category === selectedCategory);
    }

    setFilteredBrands(filtered);
  };

  const fetchUserOrders = async (userEmail: string) => {
    try {
      const response = await fetch(`${API_BASE}/user/${encodeURIComponent(userEmail)}/orders`);
      const data = await response.json();
      setUserOrders(data.orders || []);
      setUserStats({
        totalCashback: data.totalCashback || 0,
        totalSpent: data.totalSpent || 0,
        orderCount: data.orderCount || 0
      });
    } catch (error) {
      console.error('Failed to fetch user orders:', error);
    }
  };

  const createOrder = async () => {
    if (!selectedBrand || !selectedValue || !email) return;

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/order`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          brand: selectedBrand.name,
          value: selectedValue,
          email: email.trim()
        })
      });

      if (response.ok) {
        const order = await response.json();
        setCurrentOrder(order);
        localStorage.setItem('userEmail', email.trim());
        setShowPaymentModal(true);
        showNotification('Order created successfully! Please complete payment.');
      } else {
        const error = await response.json();
        showNotification(error.error || 'Failed to create order');
      }
    } catch (error) {
      console.error('Failed to create order:', error);
      showNotification('Failed to create order. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handlePaymentConfirmed = async (txHash: string) => {
    if (!currentOrder) return;

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/order/${currentOrder.orderId}/pay`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ txHash })
      });

      if (response.ok) {
        const result = await response.json();
        setShowPaymentModal(false);
        setActiveTab('orders');
        showNotification('Payment confirmed! Your gift card will be delivered shortly.');
        
        setTimeout(() => {
          pollOrderStatus(currentOrder.orderId);
        }, 3000);
        
        if (email) {
          fetchUserOrders(email);
        }
      } else {
        const error = await response.json();
        showNotification(error.error || 'Payment confirmation failed');
      }
    } catch (error) {
      console.error('Payment confirmation failed:', error);
      showNotification('Payment confirmation failed. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const pollOrderStatus = async (orderId: string) => {
    try {
      const response = await fetch(`${API_BASE}/order/${orderId}`);
      const order = await response.json();
      
      if (order.status === 'delivered') {
        showNotification('ðŸŽ‰ Gift card delivered! Check your orders.');
        if (email) {
          fetchUserOrders(email);
        }
      } else if (order.status === 'paid') {
        setTimeout(() => pollOrderStatus(orderId), 5000);
      }
    } catch (error) {
      console.error('Failed to poll order status:', error);
    }
  };

  const handleReorder = (brand: string, value: number) => {
    const brandToSelect = brands.find(b => b.name === brand);
    if (brandToSelect) {
      setSelectedBrand(brandToSelect);
      setSelectedValue(value);
      setActiveTab('shop');
      showNotification(`Reordering ${brand} $${value} gift card`);
    }
  };

  const resetOrder = () => {
    setCurrentOrder(null);
    setSelectedBrand(null);
    setSelectedValue(0);
    setShowPaymentModal(false);
  };

  const getPricing = (brand: Brand, value: number) => {
    const discountedPrice = value * (1 - brand.discount / 100);
    const savings = value - discountedPrice;
    const cashback = discountedPrice * 0.01;
    return {
      originalValue: value,
      discountedPrice: Math.round(discountedPrice * 100) / 100,
      savings: Math.round(savings * 100) / 100,
      cashback: Math.round(cashback * 100) / 100,
      finalPrice: Math.round(discountedPrice * 100) / 100
    };
  };

  const isValidEmail = (email: string) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {notification && (
        <div className="fixed top-4 right-4 bg-green-600 text-white px-6 py-3 rounded-lg shadow-lg z-50 animate-slide-in">
          {notification}
        </div>
      )}

      <header className="bg-white shadow-sm border-b sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Gift className="h-8 w-8 text-purple-600" />
              <div>
                <h1 className="text-2xl font-bold text-gray-900">KaiaCards</h1>
                <p className="text-sm text-gray-500">Asian Gift Cards with USDT</p>
              </div>
            </div>
            
            {email && userStats.orderCount > 0 && (
              <div className="hidden md:flex items-center space-x-6 text-sm">
                <div className="text-center">
                  <p className="text-gray-500">Total Spent</p>
                  <p className="font-bold">${userStats.totalSpent.toFixed(2)}</p>
                </div>
                <div className="text-center">
                  <p className="text-gray-500">Cashback</p>
                  <p className="font-bold text-green-600">${userStats.totalCashback.toFixed(2)}</p>
                </div>
                <div className="text-center">
                  <p className="text-gray-500">Orders</p>
                  <p className="font-bold">{userStats.orderCount}</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="flex space-x-1 bg-white rounded-lg p-1 mb-6 shadow-sm">
          <button
            onClick={() => setActiveTab('shop')}
            className={`flex-1 py-3 px-4 rounded-lg flex items-center justify-center space-x-2 transition font-medium ${
              activeTab === 'shop' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            <ShoppingBag className="h-5 w-5" />
            <span>Shop Cards</span>
          </button>
          <button
            onClick={() => setActiveTab('orders')}
            className={`flex-1 py-3 px-4 rounded-lg flex items-center justify-center space-x-2 transition font-medium ${
              activeTab === 'orders' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            <Clock className="h-5 w-5" />
            <span>My Orders</span>
            {userOrders.length > 0 && (
              <span className="bg-purple-100 text-purple-600 px-2 py-1 rounded-full text-xs">
                {userOrders.length}
              </span>
            )}
          </button>
          <button
            onClick={() => setActiveTab('profile')}
            className={`flex-1 py-3 px-4 rounded-lg flex items-center justify-center space-x-2 transition font-medium ${
              activeTab === 'profile' ? 'bg-purple-600 text-white' : 'text-gray-600 hover:bg-gray-100'
            }`}
          >
            <User className="h-5 w-5" />
            <span>Profile</span>
          </button>
        </div>

        {activeTab === 'shop' && (
          <div>
            <div className="mb-8">
              <h2 className="text-3xl font-bold mb-2">Buy Gift Cards with USDT</h2>
              <p className="text-gray-600">Get instant discounts on top Asian brands and earn 1% cashback</p>
            </div>

            <div className="bg-white rounded-lg shadow-sm p-4 mb-6">
              <div className="flex flex-col md:flex-row gap-4">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                  <input
                    type="text"
                    placeholder="Search brands..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
                <div className="flex items-center space-x-2">
                  <Filter className="h-5 w-5 text-gray-400" />
                  <select
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    {categories.map(category => (
                      <option key={category} value={category}>
                        {category === 'all' ? 'All Categories' : category}
                      </option>
                    ))}
                  </select>
                </div>
                <button
                  onClick={fetchBrands}
                  className="px-4 py-2 bg-gray-100 rounded-lg hover:bg-gray-200 transition"
                >
                  <RefreshCw className="h-5 w-5" />
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
              {filteredBrands.map((brand) => (
                <BrandCard
                  key={brand.id}
                  brand={brand}
                  selected={selectedBrand?.id === brand.id}
                  onClick={() => setSelectedBrand(brand)}
                />
              ))}
            </div>

            {filteredBrands.length === 0 && (
              <div className="text-center py-12">
                <Gift className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-xl font-medium text-gray-600 mb-2">No brands found</h3>
                <p className="text-gray-500">Try adjusting your search or filter criteria</p>
              </div>
            )}

            {selectedBrand && (
              <div className="bg-white rounded-xl shadow-sm border p-6">
                <h3 className="text-2xl font-bold mb-6">Purchase {selectedBrand.name} Gift Card</h3>
                
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                  <div>
                    <div className="mb-6">
                      <label className="block text-sm font-medium mb-3">Select Amount (USD)</label>
                      <div className="grid grid-cols-3 gap-3">
                        {[10, 25, 50, 100, 250, 500].filter(amount => 
                          amount >= selectedBrand.minValue && amount <= selectedBrand.maxValue
                        ).map((amount) => (
                          <button
                            key={amount}
                            onClick={() => setSelectedValue(amount)}
                            className={`py-3 px-4 text-sm font-medium rounded-lg border transition ${
                              selectedValue === amount
                                ? 'bg-purple-600 text-white border-purple-600'
                                : 'bg-white border-gray-300 hover:border-gray-400'
                            }`}
                          >
                            ${amount}
                          </button>
                        ))}
                      </div>
                      
                      <div className="mt-4">
                        <label className="block text-sm font-medium mb-2">Custom Amount</label>
                        <input
                          type="number"
                          min={selectedBrand.minValue}
                          max={selectedBrand.maxValue}
                          value={selectedValue || ''}
                          onChange={(e) => setSelectedValue(Number(e.target.value))}
                          placeholder={`${selectedBrand.minValue} - ${selectedBrand.maxValue}`}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        />
                      </div>
                    </div>
                    
                    <div className="mb-6">
                      <label className="block text-sm font-medium mb-2">Email Address *</label>
                      <input
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="your@email.com"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                        required
                      />
                      {email && !isValidEmail(email) && (
                        <p className="text-red-600 text-xs mt-1">Please enter a valid email address</p>
                      )}
                    </div>
                  </div>

                  {selectedValue > 0 && (
                    <div className="bg-gray-50 rounded-lg p-6">
                      <h4 className="font-semibold mb-4">Order Summary</h4>
                      {(() => {
                        const pricing = getPricing(selectedBrand, selectedValue);
                        return (
                          <div className="space-y-3">
                            <div className="flex justify-between">
                              <span>Gift Card Value:</span>
                              <span className="font-medium">${pricing.originalValue}</span>
                            </div>
                            <div className="flex justify-between text-green-600">
                              <span>Discount ({selectedBrand.discount}%):</span>
                              <span className="font-medium">-${pricing.savings}</span>
                            </div>
                            <div className="flex justify-between text-green-600">
                              <span>Cashback (1%):</span>
                              <span className="font-medium">${pricing.cashback}</span>
                            </div>
                            <hr className="my-3" />
                            <div className="flex justify-between font-bold text-xl">
                              <span>You Pay:</span>
                              <span>${pricing.finalPrice} USDT</span>
                            </div>
                            <div className="text-xs text-gray-500 mt-2">
                              Payment on Kaia Network â€¢ Instant delivery
                            </div>
                          </div>
                        );
                      })()}
                    </div>
                  )}
                </div>

                <button
                  onClick={createOrder}
                  disabled={!selectedValue || !email || !isValidEmail(email) || loading}
                  className="w-full mt-8 py-4 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition font-medium text-lg flex items-center justify-center space-x-2"
                >
                  {loading ? (
                    <>
                      <Loader className="h-5 w-5 animate-spin" />
                      <span>Creating Order...</span>
                    </>
                  ) : (
                    <span>Buy Gift Card</span>
                  )}
                </button>
              </div>
            )}
          </div>
        )}

        {activeTab === 'orders' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold">My Orders</h2>
              {userOrders.length > 0 && (
                <button
                  onClick={() => email && fetchUserOrders(email)}
                  className="flex items-center space-x-2 px-4 py-2 bg-gray-100 rounded-lg hover:bg-gray-200 transition"
                >
                  <RefreshCw className="h-4 w-4" />
                  <span>Refresh</span>
                </button>
              )}
            </div>

            {userOrders.length > 0 ? (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {userOrders.map((order) => (
                  <OrderCard
                    key={order.id}
                    order={order}
                    onCopyCode={(code) => showNotification('Gift card code copied to clipboard!')}
                    onReorder={handleReorder}
                  />
                ))}
              </div>
            ) : (
              <div className="text-center py-12">
                <Clock className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-xl font-medium text-gray-600 mb-2">No orders yet</h3>
                <p className="text-gray-500 mb-6">Start shopping for gift cards to see your orders here</p>
                <button
                  onClick={() => setActiveTab('shop')}
                  className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition"
                >
                  Browse Gift Cards
                </button>
              </div>
            )}
          </div>
        )}

        {activeTab === 'profile' && (
          <div>
            <h2 className="text-2xl font-bold mb-6">Profile & Statistics</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="bg-white rounded-lg p-6 shadow-sm">
                <div className="flex items-center space-x-3">
                  <div className="p-3 bg-green-100 rounded-lg">
                    <BarChart3 className="h-6 w-6 text-green-600" />
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Total Spent</p>
                    <p className="text-2xl font-bold">${userStats.totalSpent.toFixed(2)}</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg p-6 shadow-sm">
                <div className="flex items-center space-x-3">
                  <div className="p-3 bg-purple-100 rounded-lg">
                    <Gift className="h-6 w-6 text-purple-600" />
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Total Cashback</p>
                    <p className="text-2xl font-bold text-green-600">${userStats.totalCashback.toFixed(2)}</p>
                  </div>
                </div>
              </div>
              
              <div className="bg-white rounded-lg p-6 shadow-sm">
                <div className="flex items-center space-x-3">
                  <div className="p-3 bg-blue-100 rounded-lg">
                    <CheckCircle className="h-6 w-6 text-blue-600" />
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Orders Completed</p>
                    <p className="text-2xl font-bold">{userStats.orderCount}</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg p-6 shadow-sm">
              <h3 className="text-lg font-semibold mb-4">Account Information</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Email Address</label>
                  <input
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="w-full max-w-md px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
                
                <div className="pt-4 border-t">
                  <h4 className="font-medium mb-2">Quick Stats</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">Avg Order Value</p>
                      <p className="font-semibold">
                        ${userStats.orderCount > 0 ? (userStats.totalSpent / userStats.orderCount).toFixed(2) : '0.00'}
                      </p>
                    </div>
                    <div>
                      <p className="text-gray-600">Cashback Rate</p>
                      <p className="font-semibold text-green-600">
                        {userStats.totalSpent > 0 ? ((userStats.totalCashback / userStats.totalSpent) * 100).toFixed(1) : '0'}%
                      </p>
                    </div>
                    <div>
                      <p className="text-gray-600">Member Since</p>
                      <p className="font-semibold">
                        {userOrders.length > 0 
                          ? new Date(userOrders[userOrders.length - 1].createdAt).toLocaleDateString()
                          : 'Today'
                        }
                      </p>
                    </div>
                    <div>
                      <p className="text-gray-600">Favorite Category</p>
                      <p className="font-semibold">Shopping</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      <PaymentModal
        order={currentOrder}
        isOpen={showPaymentModal}
        onClose={() => setShowPaymentModal(false)}
        onPaymentConfirmed={handlePaymentConfirmed}
      />
    </div>
  );
}